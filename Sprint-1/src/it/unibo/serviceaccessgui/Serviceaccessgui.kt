/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Serviceaccessgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblue("$name START ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendrequest", cond=doswitch() )
				}	 
				state("sendrequest") { //this:State
					action { //it:State
						 var Counter = 0   
						CommUtils.outblue("$name SEND REQUEST: $Counter")
						request("storerequest", "storerequest($Counter)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="endwork",cond=whenReply("storeaccepted"))
					transition(edgeName="t01",targetState="endwork",cond=whenReply("storerefused"))
				}	 
				state("endwork") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storeaccepted(X)"), Term.createTerm("storeaccepted(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name request n. ${payloadArg(0)} accepted. END WORK")
						}
						if( checkMsgContent( Term.createTerm("storerefused(X)"), Term.createTerm("storerefused(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name request n. ${payloadArg(0)} refused. END WORK")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
