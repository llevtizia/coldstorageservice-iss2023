/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Serviceaccessgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblue("$name START ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendrequest", cond=doswitch() )
				}	 
				state("sendrequest") { //this:State
					action { //it:State
						 var Load = 50   
						CommUtils.outblue("$name SEND REQUEST: $Load kg")
						request("storerequest", "storerequest($Load)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="sendticket",cond=whenReply("storeaccepted"))
					transition(edgeName="t01",targetState="endwork",cond=whenReply("storerefused"))
				}	 
				state("sendticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storeaccepted(TICKET)"), Term.createTerm("storeaccepted(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Ticket = "${payloadArg(0)}"  
								CommUtils.outblue("$name MOVING TO INDOOR --> ticket: $Ticket")
								delay(3000) 
								CommUtils.outblue("$name SENDING TICKET: $Ticket")
								request("ticketrequest", "ticketrequest($Ticket)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="endwork",cond=whenReply("chargetaken"))
					transition(edgeName="t03",targetState="endwork",cond=whenReply("chargerefused"))
				}	 
				state("endwork") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerefused(KG)"), Term.createTerm("storerefused(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name store refused. END WORK")
						}
						if( checkMsgContent( Term.createTerm("chargetaken(TICKET)"), Term.createTerm("chargetaken(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name charge taken. END WORK")
						}
						if( checkMsgContent( Term.createTerm("chargerefused(TICKET)"), Term.createTerm("chargerefused(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name charge refused. END WORK")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
