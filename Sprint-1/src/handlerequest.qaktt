System coldstorageservice

// Messaggi per le interazioni del robot ----------------------------------------
Request engage        : engage( OWNER, STEPTIME ) "richiesta ingaggio"
Reply   engagedone    : engagedone( ARG )    for engage  
Reply   engagerefused : engagerefused( ARG ) for engage 

Dispatch disengage    : disengage(ARG) 

Request moverobot		: moverobot(TARGETX, TARGETY) 
Reply moverobotdone		: moverobotok(ARG) 
Reply moverobotfailed	: moverobotfailed(PLANDONE, PLANTODO) 

Dispatch setrobotstate	: setpos(X,Y,D) 
Dispatch setdirection	: dir(D) 

// ------------------------------------------------------------------------------

// Messaggi dell'applicazione ---------------------------------------------------
Request storerequest	: storerequest( KG ) 			"richiesta deposito KG"
Reply storeaccepted		: storeaccepted( TICKET )  	
Reply storerefused		: storerefused( X )  		

Request ticketrequest	: ticketrequest( TICKET ) 	"richiesta invio ticket"
Reply ticketaccepted	: ticketaccepted( TICKET ) 		
Reply ticketrefused		: ticketrefused( TICKET ) 	

Dispatch gotakecharge	: gotakecharge( TICKET )
//-------------------------------------------------------------------------------

Context ctxcoldstorageservice ip [host="localhost" port=8015]
Context ctxbasicrobot         ip [host="127.0.0.1" port=8020]

ExternalQActor basicrobot context ctxbasicrobot
  
  
// 1 - service access gui
QActor serviceaccessgui context ctxcoldstorageservice {
	
	State s0 initial {
		printCurrentMessage
		println("$name START ") color blue
	}
	Goto sendrequest
	
	// send the first request to the service
	State sendrequest {
		[# var Load = 50  #]
		println("$name SEND REQUEST: $Load kg") color blue
		request coldstorageservice -m storerequest : storerequest($Load)
	}
	Transition t0 whenReply storeaccepted -> sendticket
				whenReply storerefused -> endwork
				
	// send the second request to the service	
	State sendticket {
		onMsg( storeaccepted : storeaccepted( TICKET ) ) {
			[# var Ticket = "${payloadArg(0)}" #]
			println("$name MOVING TO INDOOR --> ticket: $Ticket") color blue
			delay 3000 // time for the user to move to the indoor port
			
			println("$name SENDING TICKET: $Ticket") color blue
			request coldstorageservice -m ticketrequest : ticketrequest($Ticket)
		}
	}
	Transition t0 whenReply ticketaccepted -> endwork
				whenReply ticketrefused -> endwork
				
	// end work
	State endwork {
		onMsg( storerefused : storerefused( KG ) ) {
			println("$name store refused. END WORK") color blue
		}
		onMsg( ticketaccepted : ticketaccepted( KG ) ) {
			println("$name charge taken. END WORK") color blue
		}
		onMsg( ticketrefused : ticketrefused( TIME ) ) {
			println("$name charge refused. END WORK") color blue
		}
	}
}


 
// 2 - coldstorageservice
QActor coldstorageservice context ctxcoldstorageservice {
	
	// model the cold room
	[#
		var MAXW = 1000			
		var TICKETTIME = 15
		var Current_load = 0
		var TicketNumber = 1	
	#]

	State s0 initial {
		printCurrentMessage
		println("$name START ") color green
	}
	Goto waitrequest
	
	// wait request
	State waitrequest {
		println("$name waiting for requests... ") color green
	}
	Transition t0 whenRequest storerequest -> handlestore
				whenRequest ticketrequest -> handleticket
				
	// handle the first request			
	State handlestore {
		onMsg( storerequest : storerequest( KG ) ) {
			[# 
				var Load = payloadArg(0).toInt() 
				var FreeSpace = MAXW - Current_load 
			#] 
			if [# Load <= FreeSpace #] {
				[# 
					val Ticket = TicketNumber
					TicketNumber = TicketNumber + 1
				#]
				println("$name accepting load of ${payloadArg(0)} kg ") color green
				println("$name generating ticket n. $TicketNumber") color green
				replyTo storerequest with storeaccepted : storeaccepted( $TicketNumber ) 
				// add the ticket to the list
			}
			
			else {
				println("$name refusing load of ${payloadArg(0)} kg") color green
				replyTo storerequest with storerefused : storerefused( payloadArg(0) ) 
			}
		}
	}
	Goto waitrequest
			
	
	// handle the second request
	State handleticket {
		onMsg( ticketrequest : ticketrequest( TICKET ) ) {
			[# 
				var TicketNumber = payloadArg(0).toInt() 
				var TimeInterval = 1
				
			#]
			/*
			 * var Request = requestsList.find { it.ticketNumber == TicketNumber }
				var TimeInterval = ( System.currentTimeMillis() - Request?.timestamp ) / 1000 
				var Weight = Request?.Weight
			 */
			// need to check the time
			if [# TimeInterval < TICKETTIME #] {
				println("$name accepting ticket n.$TicketNumber - weight:  kg") color green
				replyTo ticketrequest with ticketaccepted : ticketaccepted( payloadArg(0) )				
				// update load
				//[# Current_load += Weight.toFloat() #]
				forward  trolley -m gotakecharge : gotakecharge($TicketNumber)
			}
			
			else {
				println("$name refusing ticket n.${payloadArg(0)}") color green
				replyTo ticketrequest with ticketrefused : ticketrefused( payloadArg(0) )
			}
		}
		// remove the request from the list
		//[# requestslist.remove(Request) #]
	}
	Goto waitrequest
}


// 3 - trolley
QActor trolley context ctxcoldstorageservice {
	
	State s0 initial {
		printCurrentMessage
		println("$name START ") color magenta
		println("$name engage BASIC ROBOT ") color magenta
		request basicrobot -m engage: engage(trolley,150)
	}
	Transition t0 whenReply engagedone -> waitrequest
	
	
	// wait for a request
	State waitrequest {
		forward basicrobot -m setrobotstate : setpos(0,0,down)
		println("$name waiting for requests...") color magenta
		//updateResource?
		delay 500
	}  
	Transition t0 whenMsg gotakecharge -> gotoindoor
	
	// go to indoot
	State gotoindoor {
		println("$name moving to INDOOR") color magenta
		
		onMsg( gotakecharge : stgotakechargeore( TICKET ) ){
			
			[# val Ticket="${payloadArg(0)}" #]		
			println("$name charging request ticket n. $Ticket") color magenta
			//updateResource			
      	}      	
		delay 500 // simulate the movement
		request basicrobot -m moverobot : moverobot (0,4) //(0,4) position of INDOOR
	}
	Transition t0 whenReply moverobotdone -> takeload
					whenReply moverobotfailed -> failed
	
	// take the load 
	State takeload {
		println("$name taking the load...") color magenta
		
		//[# CommUtils.waitTheUser("$name HIT to terminate load") #] //simulate the command 
		delay 500
		// replyTo ticketrequest with chargetaken
	}
	Goto gotocoldroom
	
	// go to cold room
	State gotocoldroom {
		println("$name moving to COLDROOM") color magenta
		request basicrobot -m moverobot: moverobot(4,3)
		delay 5000 // simulate the movement
	}
	Transition t0 whenReply moverobotdone -> storeload
						whenReply moverobotfailed -> failed
	
	// store the load
	State storeload {
		println("$name storing the load...") color magenta
		//[# CommUtils.waitTheUser("$name HIT to terminate.") #] //simulate the command 
		delay 500
		// waits for requests
	} 
	Transition t0 whenTime 2000 -> gohome
		 			whenMsg gotakecharge -> gotoindoor
	 
	// go home
	State gohome{
		println("$name going HOME...") color magenta
		request basicrobot -m moverobot: moverobot (0,0)
		delay 2000 // simulate the movement
	}
	Transition t0 whenReply moverobotdone -> trolleyathome
						whenReply moverobotfailed -> failed
	
	// at home
	State trolleyathome {
		println("$name trolley at home") color magenta
		forward basicrobot -m disengage : disengage(trolley)
		
		println("$name  disengaged") color magenta
		delay 1000 //avoid to premature abort of connection
		[# System.exit(0) #]
	}
	
	//failed
	State failed {
		println("$name moverobot to indoor failed") color magenta
	}
}