/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Serviceaccessgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Counter = 1  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1500) 
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblue("$name START ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendstore", cond=doswitch() )
				}	 
				state("sendstore") { //this:State
					action { //it:State
						 var CurrentWeight = ( Math.round( Math.random() * 100 ) )   
						CommUtils.outblue("$name SEND REQUEST kg $CurrentWeight")
						request("storerequest", "storerequest($CurrentWeight)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="sendticket",cond=whenReply("storeaccepted"))
					transition(edgeName="t01",targetState="endwork",cond=whenReply("storerefused"))
				}	 
				state("sendticket") { //this:State
					action { //it:State
						delay(1000) 
						if( checkMsgContent( Term.createTerm("storeaccepted(TICKET,KG)"), Term.createTerm("storeaccepted(TICKET,KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var TicketNumber = payloadArg(0)
												var Load = payloadArg(1)
								CommUtils.outblue("$name MOVING TO INDOOR --> ticket: $TicketNumber, $Load kg ")
								delay(2000) 
								CommUtils.outblue("$name SENDING TICKET: $TicketNumber")
								request("ticketrequest", "ticketrequest($TicketNumber)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="endwork",cond=whenReply("chargetaken"))
					transition(edgeName="t03",targetState="endwork",cond=whenReply("ticketrefused"))
				}	 
				state("endwork") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerefused(X)"), Term.createTerm("storerefused(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Load = payloadArg(0)  
								CommUtils.outblue("$name - request of $Load kg refused. Not enough free space...")
						}
						if( checkMsgContent( Term.createTerm("ticketrefused(TICKET)"), Term.createTerm("ticketrefused(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TicketNumber = payloadArg(0)  
								CommUtils.outblue("$name - request n. $TicketNumber refused. Too much time has passed...")
						}
						if( checkMsgContent( Term.createTerm("chargetaken(TICKET)"), Term.createTerm("chargetaken(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TicketNumber = payloadArg(0)  
								CommUtils.outblue("$name - request n. $TicketNumber accepted and stored. All requests sent!")
						}
						CommUtils.outblue("$name BYE  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
