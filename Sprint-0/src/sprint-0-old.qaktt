System coldstorageservice

// Messaggi per le interazioni del robot ----------------------------------------
Request engage        : engage( OWNER, STEPTIME ) 
Reply   engagedone    : engagedone( ARG )    for engage  
Reply   engagerefused : engagerefused( ARG ) for engage 

Dispatch disengage    : disengage(ARG) 

Request moverobot		: moverobot(TARGETX, TARGETY) 
Reply moverobotdone		: moverobotok(ARG) 
Reply moverobotfailed	: moverobotfailed(PLANDONE, PLANTODO) 
 
Dispatch setrobotstate	: setpos(X,Y,D) 
Dispatch setdirection	: dir(D)   
// ------------------------------------------------------------------------------

// Messaggi dell'applicazione ---------------------------------------------------
Request storerequest  : storerequest( KG ) 			"richiesta deposito KG"
Reply storeaccepted   : storeaccepted( TICKET, KG ) for storerequest  	
Reply storerefused    : storerefused( X )  			for storerequest

Request ticketrequest : ticketrequest( TICKET ) 	"richiesta invio ticket"
//Reply ticketaccepted  : ticketaccepted( TICKET ) 	for ticketrequest
Reply chargetaken	  : chargetaken( TICKET ) 		for ticketrequest	
Reply ticketrefused   : ticketrefused( TICKET ) 	for ticketrequest 

//Dispatch gotakecharge	: gotakecharge( X )
//Request gotakecharge  : gotakecharge( X, Y )
//Dispatch chargetaken	  : chargetaken( X )
//-------------------------------------------------------------------------------

Context ctxcoldstorageservice ip [host="localhost" port=8015]
Context ctxbasicrobot         ip [host="127.0.0.1" port=8020]

ExternalQActor basicrobot context ctxbasicrobot
   
  
// 1 - service access gui
QActor serviceaccessgui context ctxcoldstorageservice {
	
	State s0 initial {
		printCurrentMessage
		println("$name START ") color blue
	}
	Goto sendstore 
	
	// send the first request to the service
	State sendstore {
		[# var CurrentWeight = ( Math.round( Math.random() * 100 ) )  #]
		println("$name SEND REQUEST kg $CurrentWeight") color blue
		request coldstorageservice -m storerequest : storerequest($CurrentWeight)
	}
	Transition t0 whenReply storeaccepted -> sendticket
				whenReply storerefused -> endwork
				
	// send the second request to the service	
	State sendticket {
		
		delay 1000
		onMsg( storeaccepted : storeaccepted( TICKET, KG ) ) {
			
			[# 
				var TicketNumber = payloadArg(0)
				var Load = payloadArg(1)
			#]
			
			println("$name MOVING TO INDOOR --> ticket: $TicketNumber, $Load kg ") color blue
			
			delay 3000
			
			println("$name SENDING TICKET: $TicketNumber") color blue
			request coldstorageservice -m ticketrequest : ticketrequest($TicketNumber)
		}
	}
	Transition t0 whenReply chargetaken -> endwork
				whenReply ticketrefused -> endwork
				
	// end work
	State endwork {
		onMsg( storerefused : storerefused( X ) ) {
			[# var Load = payloadArg(0) #]
			println("$name - request of $Load kg refused. Not enough free space...") color blue
		}
		
		onMsg( ticketrefused : ticketrefused( X ) ) {
			
			[# var TicketNumber = payloadArg(0) #]
			println("$name - request n. $TicketNumber refused. Too much time has passed...") color blue
		}
		
		onMsg( chargetaken : chargetaken( X ) ) {
			
			[# var TicketNumber = payloadArg(0) #]
			println("$name - request n. $TicketNumber accepted. All requests sent!") color blue
		}
	}
}



// 2 - coldstorageservice
QActor coldstorageservice context ctxcoldstorageservice {
	
	// model the cold room
	[#
		var MAXW = 200		
		var TICKETTIME = 15
		var Current_load = 0f
		var TicketNumber = 1	
	#]
	
	// val list = mutableListOf<Triple<Int, Float, Long>>() 
	
	
	State s0 initial {
		printCurrentMessage
		println("$name START ") color green
	}
	Goto waitrequest
	
	// wait request
	State waitrequest {
		println("$name waiting for requests... ") color green
	}
	Transition t0 whenRequest storerequest -> handlestore
				whenRequest ticketrequest -> handleticket
				
	// handle the first request			
	State handlestore {
		onMsg( storerequest : storerequest( KG ) ) {
			[# 
				var LoadToStore = payloadArg(0).toFloat() 
				var FreeSpace = MAXW - Current_load 
			#] 
			if [# LoadToStore <= FreeSpace #] {
				
				println("$name accepting load of $LoadToStore kg ") color green
				println("$name generating ticket n. $TicketNumber") color green
				replyTo storerequest with storeaccepted : storeaccepted( $TicketNumber, $LoadToStore  ) caller== serviceaccessgui
				// add the ticket to the list
				//list.add( Triple( TicketNumber, LoadToStore, System.currentTimeMillis() ) )
				
				[# TicketNumber = TicketNumber + 1 #]
			}
			
			else {
				println("$name refusing load of $LoadToStore kg") color green
				replyTo storerequest with storerefused : storerefused( $LoadToStore ) 
			}
		}
	}
	Goto waitrequest
	
	// handle the second request
	State handleticket {
		onMsg( ticketrequest : ticketrequest( TICKET ) ) {
			// need to check the time
			[# 
				var Time = 10  
				var Ticket = payloadArg(0).toInt()
			#] // System.currentTimeMillis() - time of the ticket
			
			if [# Time < TICKETTIME #] {
				println("$name accepting ticket n. $Ticket ") color green
				replyTo ticketrequest with chargetaken : chargetaken( $Ticket ) 
				
				println("$name sending request to trolley...") color green
				//forward trolley -m gotakecharge : gotakecharge( $Ticket )
				// update load
			}
			
			else {
				println("$name refusing ticket n. $Ticket - EXPIRED ") color green
				
				replyTo ticketrequest with ticketrefused : ticketrefused( $TicketNumber )
			}
		}
		// remove the request from the list
	}
	Goto waitrequest
}

 

// 3 - trolley
QActor trolley context ctxcoldstorageservice {
	
	State s0 initial {
		printCurrentMessage
		println("$name START ") color magenta
		println("$name engage BASIC ROBOT ") color magenta
		request basicrobot -m engage: engage(trolley, 150)
	}
	Transition t0 whenReply engagedone -> waitrequest
	//Goto waitrequest
	
	// wait for a request
	State waitrequest {
		//forward basicrobot -m setrobotstate : setpos(0,0,down)
		println("$name waiting for requests...") color magenta
		
		//ricezione messaggio da parte del service (non indicato dai requisiti) --> simulato delay
		delay 500
	}  
	//Transition t0 whenMsg gotakecharge -> gotoindoor
	Goto gotoindoor
	
	// go to indoot 
	State gotoindoor {  
		//onMsg( gotakecharge : gotakecharge( TICKET ) ){
			println("$name moving to INDOOR") color magenta
		//}
		
		delay 500 // simulate the movement
		request basicrobot -m moverobot : moverobot (0,4) //(0,4) position of INDOOR
	}
	Transition t0 whenReply moverobotdone -> takeload
					whenReply moverobotfailed -> failed
	
	// take the load
	State takeload {
		println("$name taking the load...") color magenta
		delay 500
		// replyTo ticketrequest with chargetaken
	}
	Goto gotocoldroom
	
	// go to cold room
	State gotocoldroom {
		println("$name moving to COLDROOM") color magenta
		request basicrobot -m moverobot: moverobot(4,3)
		delay 500 
	}
	Transition t0 whenReply moverobotdone -> storeload
			 		whenReply moverobotfailed -> failed
	
	// store the load
	State storeload {
		println("$name storing the load...") color magenta
		
		delay 2000
		// waits for requests
	}
	Transition t0 whenTime 2000 -> gohome
		 			//whenMsg gotakecharge -> gotoindoor

	 
	// go home 
	State gohome{
		println("$name going HOME...") color magenta
		request basicrobot -m moverobot: moverobot (0 ,0)
		delay 2000 // simulate the movement
	}
	Transition t0 whenReply moverobotdone -> trolleyathome
			 			whenReply moverobotfailed -> failed
	
	// at home  
	State trolleyathome {
		
		
		println("$name trolley at home") color magenta
		forward basicrobot -m setrobotstate : setpos(0,0,down)
		
		forward basicrobot -m disengage : disengage(trolley)
		
		println("$name  disengaged") color magenta
		delay 1000 //avoid to premature abort of connection
		[# System.exit(0) #]
	}
	 
	//failed
	State failed {
		println("$name moverobot to indoor failed") color magenta
	}
}